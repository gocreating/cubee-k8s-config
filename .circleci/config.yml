version: 2.1

commands:
  cmd_deploy:
    description: "Deploy k8s configs to GKE"
    parameters:
      priorityClass:
        type: string
        default: "priority-class.yaml"
      tillerRBAC:
        type: string
        default: "tiller/rbac-config.yaml"
      tillerPatchDeployment:
        type: string
        default: "tiller/patch-deployment.yaml"
      tlsRenewerHelmValueFileName:
        type: string
        default: "values-stg-and-prod.yaml"
    steps:
      - checkout
      - attach_workspace:
          at: ./my-persist-workspace
      - run:
          name: Retrieve Persisted Environment Variable
          command: |
            cat ./my-persist-workspace/persist-env-var.txt >> $BASH_ENV
      - run:
          name: Setup Environment Variable
          command: |
            GOOGLE_PROJECT_ID_BASE64=`echo $GOOGLE_PROJECT_ID | base64`
            GOOGLE_COMPUTE_ZONE_BASE64=`echo $GOOGLE_COMPUTE_ZONE | base64`
            GOOGLE_CLUSTER_NAME_BASE64=`echo $GOOGLE_CLUSTER_NAME | base64`

            touch ./non-persist-env-var.txt
            echo "export GOOGLE_PROJECT_ID_BASE64=$GOOGLE_PROJECT_ID_BASE64" >> ./non-persist-env-var.txt
            echo "export GOOGLE_COMPUTE_ZONE_BASE64=$GOOGLE_COMPUTE_ZONE_BASE64" >> ./non-persist-env-var.txt
            echo "export GOOGLE_CLUSTER_NAME_BASE64=$GOOGLE_CLUSTER_NAME_BASE64" >> ./non-persist-env-var.txt
            cat ./non-persist-env-var.txt >> $BASH_ENV
      - run:
          name: Setup Google Cloud SDK
          command: |
            echo $GCLOUD_SERVICE_KEY > ./gcloud-service-key.json
            gcloud auth activate-service-account --key-file=./gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
            rm ./gcloud-service-key.json

      - run:
          name: Setup PriorityClass
          command: |
            kubectl apply -f << parameters.priorityClass >>

            ################
            ## validation ##
            ################
            kubectl get priorityclasses.scheduling.k8s.io

      - run:
          name: Install Helm and Tiller
          command: |
            # install helm
            curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash
            kubectl apply -f << parameters.tillerRBAC >>

            # install tiller
            helm init --service-account tiller --history-max 10

            ################
            ## validation ##
            ################

            # should see tiller running
            kubectl get pods --namespace kube-system

            # should show you both the client and server version
            helm version

      # Not Working...
      #
      # - run:
      #     name: Patch Tiller
      #     command: |
      #       kubectl patch deployment tiller-deploy --patch "$(cat << parameters.tillerPatchDeployment >>)" --namespace kube-system

      #       ################
      #       ## validation ##
      #       ################
      #       kubectl get deployment tiller-deploy --output yaml --namespace kube-system

      - run:
          name: Deploy TLS Certificate Renewer
          command: |
            apt-get install -qq -y gettext
            envsubst < ./helm-chart/tls-certificate-renewer/<< parameters.tlsRenewerHelmValueFileName >> > ./helm-chart/tls-certificate-renewer/values.yaml
            cd ./helm-chart/tls-certificate-renewer
            helm upgrade tls-certificate-renewer . -f values.yaml --install --recreate-pods --reset-values

            ################
            ## validation ##
            ################
            helm ls
            kubectl describe secret tls-certificate-renewer-secret
            kubectl describe cronjob cronjob-monthly-renew-tls-certificate

jobs:
  build_tls_renewer_docker_image:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup Environment Variable
          command: |
            TAG=release-$(echo $CIRCLE_SHA1 | cut -c 1-8)-$CIRCLE_BUILD_NUM
            DNS_GOOGLE_CREDENTIALS_BASE64=`echo $DNS_GOOGLE_CREDENTIALS | base64 -w 0`
            GCLOUD_SERVICE_KEY_BASE64=`echo $GCLOUD_SERVICE_KEY | base64 -w 0`

            mkdir -p ./my-persist-workspace
            touch ./my-persist-workspace/persist-env-var.txt
            echo "export IMAGE_TAG=$TAG" >> ./my-persist-workspace/persist-env-var.txt
            echo "export DNS_GOOGLE_CREDENTIALS_BASE64=$DNS_GOOGLE_CREDENTIALS_BASE64" >> ./my-persist-workspace/persist-env-var.txt
            echo "export GCLOUD_SERVICE_KEY_BASE64=$GCLOUD_SERVICE_KEY_BASE64" >> ./my-persist-workspace/persist-env-var.txt
            cat ./my-persist-workspace/persist-env-var.txt >> $BASH_ENV
      - run:
          name: Build & Push TLS Certificate Renewer Docker Image
          command: |
            docker build \
              -t gocreating/tls-certificate-renewer:${IMAGE_TAG} \
              -f ./tls-certificate-renewer/Dockerfile .
      - run:
          name: Push Docker Image
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push gocreating/tls-certificate-renewer:$IMAGE_TAG
      - persist_to_workspace:
          root: ./my-persist-workspace
          paths:
            - persist-env-var.txt

  deploy_to_staging:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/my-working-directory
    environment:
      - GOOGLE_PROJECT_ID: "cubee-247317"
      - GOOGLE_COMPUTE_ZONE: "asia-east1-a"
      - GOOGLE_CLUSTER_NAME: "cubee-stg"
    steps:
      - cmd_deploy:
          priorityClass: "priority-class.yaml"
          tillerRBAC: "tiller/rbac-config.yaml"
          tillerPatchDeployment: "tiller/patch-deployment.yaml"
          tlsRenewerHelmValueFileName: "values-stg-and-prod.yaml"

  deploy_to_production:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/my-working-directory
    environment:
      - GOOGLE_PROJECT_ID: "cubee-247317"
      - GOOGLE_COMPUTE_ZONE: "asia-east1-a"
      - GOOGLE_CLUSTER_NAME: "cubee-prod"
    steps:
      - cmd_deploy:
          priorityClass: "priority-class.yaml"
          tillerRBAC: "tiller/rbac-config.yaml"
          tillerPatchDeployment: "tiller/patch-deployment.yaml"
          tlsRenewerHelmValueFileName: "values-stg-and-prod.yaml"

workflows:
  version: 2
  deploy_k8s_config:
    jobs:
      - build_tls_renewer_docker_image:
          filters:
            branches:
              only: master
            tags:
              only: /release-.*/
      - deploy_to_staging:
          requires:
            - build_tls_renewer_docker_image
          filters:
            branches:
              only: master
            tags:
              only: /release-.*/
      - deploy_to_production:
          requires:
            - build_tls_renewer_docker_image
            - deploy_to_staging
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /release-.*/
